"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-stacked-center-carousel";
exports.ids = ["vendor-chunks/react-stacked-center-carousel"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-stacked-center-carousel/dist/index.modern.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-stacked-center-carousel/dist/index.modern.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponsiveContainer: () => (/* binding */ ResponsiveContainer),\n/* harmony export */   StackedCarousel: () => (/* binding */ StackedCarousel)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_resize_detector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-resize-detector */ \"(ssr)/./node_modules/react-resize-detector/build/index.esm.js\");\n\n\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar StackedCarousel = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(StackedCarousel, _React$PureComponent);\n\n  function StackedCarousel(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n\n    _this.validateProps = function () {\n      var _this$props = _this.props,\n          swipeSpeed = _this$props.swipeSpeed,\n          currentVisibleSlide = _this$props.currentVisibleSlide,\n          maxVisibleSlide = _this$props.maxVisibleSlide,\n          fadeDistance = _this$props.fadeDistance,\n          customScales = _this$props.customScales,\n          data = _this$props.data;\n\n      if (data.length < (maxVisibleSlide + 1) / 2) {\n        throw Error('you must have more than (maxVisibleSlide + 1) / 2 data item');\n      }\n\n      if (currentVisibleSlide && currentVisibleSlide % 2 !== 1 || maxVisibleSlide % 2 !== 1) {\n        throw Error('currentVisibleSlide or maxVisibleSlide must be an odd number');\n      }\n\n      if (currentVisibleSlide && currentVisibleSlide > maxVisibleSlide) {\n        throw Error('currentVisibleSlide must be smaller than maxVisibleSlide');\n      }\n\n      if (fadeDistance !== undefined) {\n        if (fadeDistance > 1 || fadeDistance < 0) {\n          throw Error('fadeDistance is a percentage value in the range of 0 - 1');\n        }\n      }\n\n      if (customScales && customScales.length !== (maxVisibleSlide + 3) / 2) {\n        throw Error('customScales must have lengh (maxVisibleSlide + 3) / 2');\n      }\n\n      if (swipeSpeed && (swipeSpeed > 0.99 || swipeSpeed < 0.01)) {\n        throw Error('swipeSpeed must have a value between 0.01 and 0.99');\n      }\n    };\n\n    _this.initializeProperties = function (constructor) {\n      if (constructor === void 0) {\n        constructor = false;\n      }\n\n      _this.validateProps();\n\n      var _this$props2 = _this.props,\n          carouselWidth = _this$props2.carouselWidth,\n          slideWidth = _this$props2.slideWidth,\n          currentVisibleDisplaySlide = _this$props2.currentVisibleSlide,\n          maxVisibleSlide = _this$props2.maxVisibleSlide;\n      var currentVisibleSlides = currentVisibleDisplaySlide || maxVisibleSlide;\n      var visibleSlidePerSide = (currentVisibleSlides - 1) / 2;\n      var slidePerSide = Math.max(visibleSlidePerSide + 1, 1);\n      var totalRenderCount = maxVisibleSlide + 2;\n      var renderedSlidePerSide = (maxVisibleSlide + 1) / 2;\n\n      var _this$calculateScaleA = _this.calculateScaleAndOffsets(slidePerSide),\n          offsets = _this$calculateScaleA.offsets,\n          scaledOffsets = _this$calculateScaleA.scaledOffsets,\n          scales = _this$calculateScaleA.scales;\n\n      var newRenderedSlides = constructor ? Array(totalRenderCount).fill(null) : _this.state.renderedSlides.filter(function (_ref) {\n        var slideIndex = _ref.slideIndex,\n            dataIndex = _ref.dataIndex;\n        return dataIndex === -1 || Math.abs(slideIndex) <= _this.slidePerSide;\n      });\n      var slideInfoMap = {};\n      var newCenterSlideRelativeIndex = constructor ? (totalRenderCount - 1) / 2 : newRenderedSlides.findIndex(function (_ref2) {\n        var slideIndex = _ref2.slideIndex;\n        return slideIndex === 0;\n      });\n      var newCenterDataIndex = constructor ? 0 : newRenderedSlides[newCenterSlideRelativeIndex].dataIndex;\n      var filledWidth = 0;\n      var centerPosition = carouselWidth / 2 - slideWidth / 2;\n\n      var _loop = function _loop(absIndex) {\n        var offset = offsets[absIndex];\n        var slideScale = scales[absIndex];\n        var currentOffSet = filledWidth + offset;\n        [-absIndex, absIndex].forEach(function (slideIndex) {\n          var relativeIndex = newCenterSlideRelativeIndex + slideIndex;\n          var position = slideIndex >= 0 ? currentOffSet : -currentOffSet;\n          var opacity = absIndex === slidePerSide ? 0 : 1;\n\n          var dataIndex = _this.modDataRange(newCenterDataIndex + slideIndex);\n\n          newRenderedSlides[relativeIndex] = {\n            dataIndex: dataIndex,\n            scale: slideScale,\n            position: position,\n            slideIndex: slideIndex,\n            opacity: opacity,\n            zIndex: renderedSlidePerSide - Math.abs(slideIndex),\n            key: constructor ? slideIndex : newRenderedSlides[relativeIndex].key\n          };\n          slideInfoMap[slideIndex] = {\n            position: position,\n            scale: slideScale,\n            opacity: opacity\n          };\n        });\n        if (absIndex !== 0) filledWidth += scaledOffsets[absIndex];\n      };\n\n      for (var absIndex = 0; absIndex <= slidePerSide; absIndex++) {\n        _loop(absIndex);\n      }\n\n      for (var i = -slidePerSide; i <= slidePerSide; i++) {\n        slideInfoMap[i].maxTransformDistance = {};\n        slideInfoMap[i].maxTransformScale = {};\n        slideInfoMap[i].maxTransformOpacity = {\n          left: i === -slidePerSide + 1 || i === slidePerSide ? 1 : 0,\n          right: i === -slidePerSide || i === slidePerSide - 1 ? 1 : 0\n        };\n        slideInfoMap[i].slideIndex = i;\n\n        if (i === -slidePerSide) {\n          slideInfoMap[i].maxTransformDistance.left = 0;\n          slideInfoMap[i].maxTransformScale.left = 0;\n        } else {\n          slideInfoMap[i].maxTransformDistance.left = slideInfoMap[i].position - slideInfoMap[i - 1].position;\n          slideInfoMap[i].maxTransformScale.left = Math.abs(slideInfoMap[i].scale - slideInfoMap[i - 1].scale);\n        }\n\n        if (i === slidePerSide) {\n          slideInfoMap[i].maxTransformDistance.right = 0;\n          slideInfoMap[i].maxTransformScale.right = 0;\n        } else {\n          slideInfoMap[i].maxTransformDistance.right = slideInfoMap[i + 1].position - slideInfoMap[i].position;\n          slideInfoMap[i].maxTransformScale.right = Math.abs(slideInfoMap[i + 1].scale - slideInfoMap[i].scale);\n        }\n      }\n\n      if (maxVisibleSlide > currentVisibleSlides) {\n        var maxRenderedSlidePerSide = (maxVisibleSlide + 1) / 2;\n        var currentSlidePerSide = slidePerSide;\n\n        for (var _i = currentSlidePerSide + 1; _i <= maxRenderedSlidePerSide; _i++) {\n          for (var direct = 1; direct >= 0; direct--) {\n            var insertIndex = newCenterSlideRelativeIndex + (direct === 1 ? _i : -_i);\n            var prevIndex = insertIndex + (direct === 1 ? -1 : 1);\n            var slideIndex = direct === 1 ? _i : -_i;\n            var scalePositionIndex = constructor ? prevIndex : insertIndex;\n            newRenderedSlides[insertIndex] = {\n              scale: newRenderedSlides[scalePositionIndex].scale,\n              position: newRenderedSlides[scalePositionIndex].position,\n              key: constructor ? -slideIndex : newRenderedSlides[insertIndex].key,\n              dataIndex: -1,\n              slideIndex: slideIndex,\n              opacity: 0,\n              zIndex: 0\n            };\n          }\n        }\n      }\n\n      var sortedSlideInfo = Object.values(slideInfoMap);\n      sortedSlideInfo.sort(function (slide1, slide2) {\n        return slide1.position - slide2.position;\n      });\n      return {\n        renderedSlides: newRenderedSlides,\n        centerSlideRelativeIndex: newCenterSlideRelativeIndex,\n        slideInfoMap: slideInfoMap,\n        slidePerSide: slidePerSide,\n        newRenderedSlides: newRenderedSlides,\n        sortedSlideInfo: sortedSlideInfo,\n        centerPosition: centerPosition,\n        renderedSlidePerSide: renderedSlidePerSide\n      };\n    };\n\n    _this.calculateScaleAndOffsets = function (slidePerSide) {\n      var _this$props3 = _this.props,\n          carouselWidth = _this$props3.carouselWidth,\n          slideWidth = _this$props3.slideWidth,\n          customScales = _this$props3.customScales,\n          fadeDistance = _this$props3.fadeDistance;\n      var availableSpace = carouselWidth / 2 - slideWidth / 2;\n      var scales = [1];\n      var scaledSlideWidths = [slideWidth];\n\n      for (var slide = 1; slide <= slidePerSide; slide++) {\n        var scale = customScales ? customScales[slide] : Math.pow(StackedCarousel.defaultScaleFactor, slide);\n        scales.push(scale);\n        scaledSlideWidths.push(slideWidth * scale);\n      }\n\n      var includedSlideWidths = scaledSlideWidths.slice(1);\n      var fillingSpace = availableSpace;\n\n      if (fadeDistance !== undefined) {\n        includedSlideWidths = scaledSlideWidths.slice(1, slidePerSide);\n        fillingSpace = availableSpace * (1 - fadeDistance);\n      }\n\n      var totalSlideWidth = includedSlideWidths.reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      var offSetPercentage = totalSlideWidth ? fillingSpace / totalSlideWidth : 0;\n      var scaledOffsets = [0];\n      var offsets = [0];\n\n      for (var _slide = 1; _slide <= slidePerSide; _slide++) {\n        var isCustomFade = fadeDistance !== undefined && _slide === slidePerSide;\n        var _scale = scales[_slide];\n        scaledOffsets[_slide] = isCustomFade ? fadeDistance * availableSpace : slideWidth * _scale * offSetPercentage;\n        offsets[_slide] = scaledOffsets[_slide] + slideWidth * ((1 - _scale) / 2);\n      }\n\n      return {\n        offsets: offsets,\n        scaledOffsets: scaledOffsets,\n        scales: scales\n      };\n    };\n\n    _this.getZIndex = function (slideIndex) {\n      return _this.renderedSlidePerSide - Math.abs(slideIndex);\n    };\n\n    _this.updateHeight = function () {\n      var height = _this.props.height;\n      if (height) return;\n\n      var _this$getSlideDOMInfo = _this.getSlideDOMInfo(0),\n          slideDOM = _this$getSlideDOMInfo.slideDOM;\n\n      var parsedHeight = parseInt(window.getComputedStyle(slideDOM).height);\n\n      if (parsedHeight !== _this.height) {\n        _this.height = parsedHeight;\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this.modDataRange = function (n) {\n      var data = _this.props.data;\n      var m = data.length;\n      return (n % m + m) % m;\n    };\n\n    _this.debouncedClearInvisibleSlide = function () {\n      var transitionTime = _this.props.transitionTime;\n      clearTimeout(_this.clearSlideTimeout);\n      _this.clearSlideTimeout = setTimeout(_this.clearUselessSlide, transitionTime !== undefined ? transitionTime : StackedCarousel.defaultTransitionTime);\n    };\n\n    _this.clearUselessSlide = function () {\n      _this.addedSlide = 0;\n      var renderedSlides = _this.state.renderedSlides;\n      var newRenderedSlides = renderedSlides.filter(function (_ref3) {\n        var slideIndex = _ref3.slideIndex,\n            dataIndex = _ref3.dataIndex;\n        var absoluteSlideIndex = Math.abs(slideIndex);\n\n        if (absoluteSlideIndex <= _this.slidePerSide || dataIndex === -1) {\n          return true;\n        }\n\n        return false;\n      });\n\n      _this.setState({\n        renderedSlides: newRenderedSlides\n      });\n    };\n\n    _this.safeGetSlideInfo = function (slideIndex) {\n      var positionIndex = slideIndex;\n\n      if (positionIndex > _this.slidePerSide) {\n        positionIndex = _this.slidePerSide;\n      } else if (positionIndex < -_this.slidePerSide) {\n        positionIndex = -_this.slidePerSide;\n      }\n\n      return _this.slideInfoMap[positionIndex];\n    };\n\n    _this.getInsertionInfo = function (steps) {\n      var newAddedSlideIndex = steps > 0 ? _this.slidePerSide - steps + 1 : -_this.slidePerSide - steps - 1;\n      var targetSlideIndex = steps > 0 ? _this.slidePerSide : -_this.slidePerSide;\n\n      var requireMoreSlide = function requireMoreSlide(current, target) {\n        return steps > 0 ? current <= target : current >= target;\n      };\n\n      var updateCount = steps > 0 ? 1 : -1;\n      return {\n        newAddedSlideIndex: newAddedSlideIndex,\n        targetSlideIndex: targetSlideIndex,\n        requireMoreSlide: requireMoreSlide,\n        updateCount: updateCount\n      };\n    };\n\n    _this.moveCarousel = function (steps, disableSwipeRightState) {\n      if (disableSwipeRightState === void 0) {\n        disableSwipeRightState = false;\n      }\n\n      var renderedSlides = _this.state.renderedSlides;\n      var onActiveSlideChange = _this.props.onActiveSlideChange;\n      var newCenterDataIndex = 0;\n      var newSlides = renderedSlides.map(function (oldSlide) {\n        var slideIndex = oldSlide.slideIndex,\n            dataIndex = oldSlide.dataIndex;\n        if (dataIndex === -1) return oldSlide;\n        if (slideIndex === 0) newCenterDataIndex = _this.modDataRange(dataIndex + steps);\n        var newSlideIndex = slideIndex + -steps;\n\n        var slideInfo = _this.safeGetSlideInfo(newSlideIndex);\n\n        return _extends({}, oldSlide, {\n          slideIndex: newSlideIndex,\n          position: slideInfo.position,\n          scale: slideInfo.scale,\n          opacity: slideInfo.opacity,\n          zIndex: _this.getZIndex(newSlideIndex)\n        });\n      });\n\n      if (steps !== 0) {\n        (function () {\n          var maxSlideIndex = steps > 0 ? _this.slidePerSide : -_this.slidePerSide;\n          _this.addedSlide += Math.abs(steps);\n\n          var insertionInfo = _this.getInsertionInfo(steps);\n\n          var newAddedSlideIndex = insertionInfo.newAddedSlideIndex;\n          var requireMoreSlide = insertionInfo.requireMoreSlide,\n              updateCount = insertionInfo.updateCount,\n              targetSlideIndex = insertionInfo.targetSlideIndex;\n\n          while (requireMoreSlide(newAddedSlideIndex, targetSlideIndex)) {\n            var slideAlreadyExist = newSlides.find(function (_ref4) {\n              var slideIndex = _ref4.slideIndex;\n              return slideIndex === newAddedSlideIndex;\n            });\n\n            if (!slideAlreadyExist) {\n              var insertPosition = newSlides.findIndex(function (_ref5) {\n                var slideIndex = _ref5.slideIndex,\n                    dataIndex = _ref5.dataIndex;\n                return slideIndex === newAddedSlideIndex - updateCount && dataIndex !== -1;\n              });\n              var _this$slideInfoMap$ma = _this.slideInfoMap[maxSlideIndex],\n                  scale = _this$slideInfoMap$ma.scale,\n                  position = _this$slideInfoMap$ma.position;\n\n              var insertDataIndex = _this.modDataRange(newSlides[insertPosition].dataIndex + updateCount);\n\n              _this.keyCount += 1;\n\n              var zIndex = _this.getZIndex(newAddedSlideIndex);\n\n              var insertSlide = {\n                scale: scale,\n                position: position,\n                opacity: 0,\n                zIndex: zIndex - _this.addedSlide,\n                slideIndex: newAddedSlideIndex,\n                dataIndex: insertDataIndex,\n                key: _this.keyCount\n              };\n              newSlides.splice(steps > 0 ? insertPosition + 1 : insertPosition, 0, insertSlide);\n            }\n\n            newAddedSlideIndex += updateCount;\n          }\n        })();\n      }\n\n      if (steps !== 0 && onActiveSlideChange) {\n        onActiveSlideChange(newCenterDataIndex);\n      }\n\n      _this.setState(function () {\n        return {\n          swipeStarted: false,\n          renderedSlides: newSlides,\n          swipRight: disableSwipeRightState ? false : steps < 0 ? true : false\n        };\n      }, function () {\n        setTimeout(function () {\n          _this.resetSlides();\n        }, 0);\n      });\n    };\n\n    _this.getSlideDOMInfo = function (slideIndex) {\n      var slideWidth = _this.props.slideWidth;\n      var listRef = _this.listRef.current;\n      var slideDOM = listRef.getElementsByClassName(\"react-stacked-center-carousel-slide-\" + slideIndex)[0];\n      var slideRect = slideDOM.getBoundingClientRect();\n\n      var _listRef$getBoundingC = listRef.getBoundingClientRect(),\n          carouselLeft = _listRef$getBoundingC.left;\n\n      var scale = slideRect.width / slideWidth;\n      var additionalOffset = slideWidth * 0.5 * (1 - scale);\n      var slideOffsetLeft = slideRect.left - carouselLeft - additionalOffset;\n      var slideCenterOffset = slideOffsetLeft - _this.centerPosition;\n      return {\n        scale: scale,\n        slideDOM: slideDOM,\n        slideCenterOffset: slideCenterOffset\n      };\n    };\n\n    _this.getSlideScaleAndOpacity = function (centerOffset) {\n      var targetSlide = _this.sortedSlideInfo.find(function (_ref6) {\n        var position = _ref6.position;\n        return Math.ceil(position) >= centerOffset;\n      }) || _this.sortedSlideInfo[_this.sortedSlideInfo.length - 1];\n\n      var position = targetSlide.position,\n          slideIndex = targetSlide.slideIndex,\n          scale = targetSlide.scale,\n          maxTransformDistance = targetSlide.maxTransformDistance,\n          maxTransformScale = targetSlide.maxTransformScale,\n          maxTransformOpacity = targetSlide.maxTransformOpacity,\n          opacity = targetSlide.opacity;\n      var offset = Math.ceil(position) - centerOffset;\n      var offsetPercentage = maxTransformDistance.left === 0 ? 0 : offset / maxTransformDistance.left * (slideIndex <= 0 ? -1 : 1);\n      return {\n        scale: scale + maxTransformScale.left * offsetPercentage,\n        opacity: opacity + maxTransformOpacity.left * offsetPercentage\n      };\n    };\n\n    _this.centerOffset = function (slideIndex) {\n      var _this$getSlideDOMInfo2 = _this.getSlideDOMInfo(slideIndex),\n          slideCenterOffset = _this$getSlideDOMInfo2.slideCenterOffset;\n\n      return Math.abs(_this.slideInfoMap[0].position - slideCenterOffset);\n    };\n\n    _this.onSwipeStart = function (e) {\n      var _this$props4 = _this.props,\n          onActiveSlideChange = _this$props4.onActiveSlideChange,\n          disableSwipe = _this$props4.disableSwipe;\n      if (disableSwipe) return;\n\n      var initalSwipeX = _this.getSwipeX(e);\n\n      var renderedSlides = _this.state.renderedSlides;\n      clearTimeout(_this.clearSlideTimeout);\n      var shiftDirection = 0;\n      var centerDataIndex = 0;\n      if (_this.centerOffset(-1) < _this.centerOffset(0)) shiftDirection = 1;else if (_this.centerOffset(1) < _this.centerOffset(0)) shiftDirection = -1;\n      var newRenderedSlides = [];\n      var swipePositionInfo = [];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(renderedSlides), _step; !(_step = _iterator()).done;) {\n        var slide = _step.value;\n        var slideIndex = slide.slideIndex,\n            dataIndex = slide.dataIndex;\n\n        if (dataIndex === -1) {\n          newRenderedSlides.push(slide);\n          swipePositionInfo.push({\n            slideIndex: slideIndex,\n            maxLeft: 0,\n            maxRight: 0\n          });\n          continue;\n        }\n\n        var newSlideIndex = slideIndex + shiftDirection;\n        if (Math.abs(newSlideIndex) > _this.slidePerSide) continue;\n        if (newSlideIndex === 0) centerDataIndex = dataIndex;\n\n        var _this$getSlideDOMInfo3 = _this.getSlideDOMInfo(slideIndex),\n            slideCenterOffset = _this$getSlideDOMInfo3.slideCenterOffset,\n            scale = _this$getSlideDOMInfo3.scale;\n\n        var _this$getSlideScaleAn = _this.getSlideScaleAndOpacity(slideCenterOffset),\n            opacity = _this$getSlideScaleAn.opacity;\n\n        var _this$safeGetSlideInf = _this.safeGetSlideInfo(newSlideIndex),\n            maxTransformDistance = _this$safeGetSlideInf.maxTransformDistance,\n            position = _this$safeGetSlideInf.position;\n\n        swipePositionInfo.push({\n          slideIndex: newSlideIndex,\n          maxLeft: slideCenterOffset - position + maxTransformDistance.left,\n          maxRight: position + maxTransformDistance.right - slideCenterOffset\n        });\n        newRenderedSlides.push(_extends({}, slide, {\n          scale: scale,\n          opacity: opacity,\n          position: slideCenterOffset,\n          slideIndex: newSlideIndex,\n          zIndex: _this.getZIndex(newSlideIndex)\n        }));\n      }\n\n      if (onActiveSlideChange && shiftDirection !== 0) {\n        onActiveSlideChange(centerDataIndex);\n      }\n\n      _this.setState({\n        swipeStarted: true,\n        initalSwipeX: initalSwipeX,\n        renderedSlides: newRenderedSlides,\n        prevRenderedSlides: [].concat(newRenderedSlides),\n        swipePositionInfo: swipePositionInfo\n      });\n    };\n\n    _this.onSwipe = function (e) {\n      var swipeStarted = _this.state.swipeStarted;\n\n      if (!swipeStarted) {\n        return;\n      }\n\n      var _this$state = _this.state,\n          initalSwipeX = _this$state.initalSwipeX,\n          prevRenderedSlides = _this$state.prevRenderedSlides,\n          swipePositionInfo = _this$state.swipePositionInfo;\n      var slideWidth = _this.props.slideWidth;\n      var tempShift = false;\n\n      var currentSwipeX = _this.getSwipeX(e);\n\n      var swipeDistance = initalSwipeX - currentSwipeX;\n      var delta = Math.abs(swipeDistance);\n      var swipeLeft = swipeDistance > 0;\n      var transformFactor = 10 / slideWidth * delta;\n      var transformPercentage = 1 - Math.pow(1 - (_this.props.swipeSpeed || 0.5), transformFactor);\n      var newRenderedSlides = prevRenderedSlides.map(function (slide, index) {\n        var position = slide.position,\n            slideIndex = slide.slideIndex,\n            dataIndex = slide.dataIndex;\n        if (dataIndex === -1) return slide;\n        var maxDeltaX = swipePositionInfo[index][swipeLeft ? 'maxLeft' : 'maxRight'];\n        var targetPosition = position + (swipeLeft ? -1 : 1) * maxDeltaX * transformPercentage;\n\n        var _this$getSlideScaleAn2 = _this.getSlideScaleAndOpacity(targetPosition),\n            scale = _this$getSlideScaleAn2.scale,\n            opacity = _this$getSlideScaleAn2.opacity;\n\n        var zIndex = slide.zIndex;\n\n        if (Math.abs(slideIndex) === 1) {\n          if (_this.centerOffset(slideIndex) < _this.centerOffset(0)) {\n            zIndex = _this.maxZIndex;\n            tempShift = true;\n          }\n        }\n\n        return _extends({}, slide, {\n          position: targetPosition,\n          scale: scale,\n          opacity: opacity,\n          zIndex: zIndex\n        });\n      });\n\n      _this.setState({\n        renderedSlides: newRenderedSlides,\n        tempShift: tempShift\n      });\n    };\n\n    _this.resetSlides = function () {\n      var renderedSlides = _this.state.renderedSlides;\n      var newDefault = renderedSlides.map(function (slide) {\n        var _this$safeGetSlideInf2 = _this.safeGetSlideInfo(slide.slideIndex),\n            opacity = _this$safeGetSlideInf2.opacity,\n            scale = _this$safeGetSlideInf2.scale,\n            position = _this$safeGetSlideInf2.position;\n\n        return _extends({}, slide, {\n          zIndex: _this.getZIndex(slide.slideIndex),\n          opacity: opacity,\n          scale: scale,\n          position: position\n        });\n      });\n\n      _this.setState(function () {\n        return {\n          renderedSlides: newDefault,\n          swipRight: false\n        };\n      }, _this.debouncedClearInvisibleSlide);\n    };\n\n    _this.onSwipeEnd = function () {\n      var swipeStarted = _this.state.swipeStarted;\n      if (!swipeStarted) return;\n      var renderedSlides = _this.state.renderedSlides;\n      var newCenterSlide = renderedSlides.find(function (_ref7) {\n        var zIndex = _ref7.zIndex;\n        return zIndex === _this.maxZIndex;\n      });\n\n      _this.moveCarousel((newCenterSlide === null || newCenterSlide === void 0 ? void 0 : newCenterSlide.slideIndex) || 0);\n\n      _this.setState({\n        tempShift: false\n      });\n    };\n\n    _this.goNext = function () {\n      _this.moveCarousel(1);\n    };\n\n    _this.goBack = function () {\n      _this.moveCarousel(-1);\n    };\n\n    _this.swipeTo = function (steps) {\n      _this.moveCarousel(steps);\n    };\n\n    var _this$initializePrope = _this.initializeProperties(true),\n        renderedSlides = _this$initializePrope.renderedSlides,\n        slideInfoMap = _this$initializePrope.slideInfoMap,\n        slidePerSide = _this$initializePrope.slidePerSide,\n        sortedSlideInfo = _this$initializePrope.sortedSlideInfo,\n        centerPosition = _this$initializePrope.centerPosition,\n        renderedSlidePerSide = _this$initializePrope.renderedSlidePerSide;\n\n    var onActiveSlideChange = _this.props.onActiveSlideChange;\n    _this.slideInfoMap = slideInfoMap;\n    _this.sortedSlideInfo = sortedSlideInfo;\n    _this.slidePerSide = slidePerSide;\n    _this.height = _this.props.height || 0;\n    _this.listRef = react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    _this.clearSlideTimeout = null;\n    _this.keyCount = props.data.length;\n    _this.addedSlide = 0;\n    _this.centerPosition = centerPosition;\n    _this.maxZIndex = 100;\n    _this.renderedSlidePerSide = renderedSlidePerSide;\n\n    if (onActiveSlideChange) {\n      onActiveSlideChange(0);\n    }\n\n    _this.state = {\n      initalSwipeX: 0,\n      swipeStarted: false,\n      renderedSlides: renderedSlides,\n      prevRenderedSlides: [].concat(renderedSlides),\n      swipePositionInfo: [],\n      swipRight: false,\n      tempShift: false\n    };\n    return _this;\n  }\n\n  var _proto = StackedCarousel.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateHeight();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.clearSlideTimeout);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (!shouldRecaclculate(this.props, prevProps)) return;\n\n    var _this$initializePrope2 = this.initializeProperties(this.props.maxVisibleSlide !== prevProps.maxVisibleSlide),\n        slideInfoMap = _this$initializePrope2.slideInfoMap,\n        slidePerSide = _this$initializePrope2.slidePerSide,\n        newRenderedSlides = _this$initializePrope2.newRenderedSlides,\n        sortedSlideInfo = _this$initializePrope2.sortedSlideInfo,\n        centerPosition = _this$initializePrope2.centerPosition;\n\n    this.slideInfoMap = slideInfoMap;\n    this.sortedSlideInfo = sortedSlideInfo;\n    this.slidePerSide = slidePerSide;\n    this.centerPosition = centerPosition;\n    this.setState(function () {\n      return {\n        initalSwipeX: 0,\n        renderedSlides: newRenderedSlides,\n        prevRenderedSlides: [].concat(newRenderedSlides),\n        swipRight: false\n      };\n    }, this.updateHeight);\n  };\n\n  _proto.getSwipeX = function getSwipeX(e) {\n    if (e.type[0] === 'm') return e.clientX;\n\n    try {\n      var _e$touches$, _e$changedTouches$;\n\n      return ((_e$touches$ = e.touches[0]) === null || _e$touches$ === void 0 ? void 0 : _e$touches$.clientX) || ((_e$changedTouches$ = e.changedTouches[0]) === null || _e$changedTouches$ === void 0 ? void 0 : _e$changedTouches$.clientX);\n    } catch (_unused) {\n      throw Error('Something went wrong with getting mouse position');\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$state2 = this.state,\n        swipeStarted = _this$state2.swipeStarted,\n        renderedSlides = _this$state2.renderedSlides,\n        swipRight = _this$state2.swipRight,\n        tempShift = _this$state2.tempShift;\n    var _this$props5 = this.props,\n        Component = _this$props5.slideComponent,\n        _this$props5$transiti = _this$props5.transitionTime,\n        transitionTime = _this$props5$transiti === void 0 ? StackedCarousel.defaultTransitionTime : _this$props5$transiti,\n        className = _this$props5.className,\n        data = _this$props5.data,\n        slideWidth = _this$props5.slideWidth,\n        customTransition = _this$props5.customTransition,\n        carouselWidth = _this$props5.carouselWidth,\n        useGrabCursor = _this$props5.useGrabCursor,\n        height = _this$props5.height;\n    var cursor = useGrabCursor && (swipeStarted ? 'grabbing' : 'grab') || 'default';\n    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"react-stacked-center-carousel \" + (className || ''),\n      onMouseDown: this.onSwipeStart,\n      onMouseUp: this.onSwipeEnd,\n      onMouseMove: this.onSwipe,\n      onMouseLeave: this.onSwipeEnd,\n      onTouchStart: this.onSwipeStart,\n      onTouchMove: this.onSwipe,\n      onTouchEnd: this.onSwipeEnd,\n      ref: this.listRef,\n      style: {\n        width: carouselWidth,\n        height: height || this.height,\n        position: 'relative',\n        overflow: 'hidden',\n        cursor: cursor\n      }\n    }, renderedSlides.map(function (_ref8) {\n      var opacity = _ref8.opacity,\n          slideIndex = _ref8.slideIndex,\n          dataIndex = _ref8.dataIndex,\n          position = _ref8.position,\n          scale = _ref8.scale,\n          key = _ref8.key,\n          zIndex = _ref8.zIndex;\n      var ID = dataIndex === -1 ? \"hidden-\" + key : slideIndex;\n      var zDuration = transitionTime * (swipRight ? 0.6 : 1);\n      var transition = swipeStarted ? 'none' : customTransition || \"all \" + transitionTime + \"ms ease, z-index \" + zDuration + \"ms ease\";\n      var isCenterSlide = tempShift ? zIndex === _this2.maxZIndex : slideIndex === 0;\n      return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        key: key,\n        className: \"react-stacked-center-carousel-slide-\" + ID,\n        draggable: false,\n        style: {\n          position: 'absolute',\n          display: 'flex',\n          left: \"calc(50% - \" + slideWidth / 2 + \"px)\",\n          transform: \"translateX(\" + position + \"px) scale(\" + scale + \")\",\n          width: slideWidth,\n          transition: transition,\n          opacity: opacity,\n          zIndex: zIndex\n        }\n      }, dataIndex !== -1 && react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, {\n        dataIndex: dataIndex,\n        data: data,\n        slideIndex: slideIndex,\n        isCenterSlide: isCenterSlide,\n        swipeTo: _this2.swipeTo\n      }));\n    }));\n  };\n\n  return StackedCarousel;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().PureComponent));\nStackedCarousel.defaultScaleFactor = 0.85;\nStackedCarousel.defaultTransitionTime = 450;\n\nfunction shouldRecaclculate(prop1, prop2) {\n  var _prop1$customScales, _prop2$customScales;\n\n  if (prop1.slideWidth !== prop2.slideWidth || prop1.carouselWidth !== prop2.carouselWidth || prop1.maxVisibleSlide !== prop2.maxVisibleSlide || prop1.currentVisibleSlide !== prop2.currentVisibleSlide || prop1.fadeDistance !== prop2.fadeDistance || ((_prop1$customScales = prop1.customScales) === null || _prop1$customScales === void 0 ? void 0 : _prop1$customScales.join('')) !== ((_prop2$customScales = prop2.customScales) === null || _prop2$customScales === void 0 ? void 0 : _prop2$customScales.join(''))) return true;\n  return false;\n}\n\nfunction ResponsiveContainer(props) {\n  var render = props.render,\n      carouselRef = props.carouselRef;\n\n  var _useResizeDetector = (0,react_resize_detector__WEBPACK_IMPORTED_MODULE_1__.useResizeDetector)(),\n      width = _useResizeDetector.width,\n      ref = _useResizeDetector.ref;\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    ref: ref,\n    className: 'stacked-carousel-responsive-container',\n    style: {\n      width: '100%'\n    }\n  }, width && render(width, carouselRef));\n}\n\n\n//# sourceMappingURL=index.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-stacked-center-carousel/dist/index.modern.js\n");

/***/ })

};
;